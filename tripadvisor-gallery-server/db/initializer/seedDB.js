const fs = require('fs');
const path = require('path');
const os = require('os');
const _ = require('underscore');

// This class generates a random activity instance
const { TripAdvisorActivity } = require('./data/TripAdvisorActivity.js');

// This class accepts an AWS S3 link and generates a random photo instance
const { TripAdvisorPhoto } = require('./data/TripAdvisorPhoto.js');

// This class generates a random instance of a persona that uploaded the photo - user vs management
const { TripAdvisorPhotoCreatorInfo } = require('./data/TripAdvisorPhotoCreatorInfo.js');

// DB model functions responsible for adding activities, personas, and photos to their tables
const { addActivity, addPhotoCreatorInfo, addPhoto } = require('../models/index.js');

// This file path is where the urls for the S3 images live
const imageUrlsFilePath = path.join(__dirname, '../', 'aws-S3', 'S3-picture-urls.txt');

// Note: eslint is disabled for no-define so that the functions can be declared in logical order

// init --------------------------------------------------------------------------------------------
// init reads the S3 url links from the text file described above
// The url links are shuffled so that they appear in a random order
// The url links are passed to a callback, which begins the process of populating the database
const init = (filePath, callback) => {
  fs.readFile(filePath, 'utf8', (err, filePaths) => {
    if (err) {
      throw new Error(err);
    } else {
      let imageUrls = filePaths.split(os.EOL);
      imageUrls = imageUrls.slice(1); // Removes absolute url from top of file (i.e. amazonaws.com/)
      imageUrls = _.shuffle(imageUrls);
      callback(imageUrls); // Callback defined when init function runs: invokes populateDatabase
    }
  });
};
// -------------------------------------------------------------------------------------------------
// populateDatabase --------------------------------------------------------------------------------
// A recursive function that creates 100 activities and their respective users / photos
// Base Case: the function will stop invoking itself once 100 activites have been created
// populateDatabase accepts the photos array generated by init, an activityCount, and a callback
// activityCount tracks how many activities have been added to the database
// The final callback prints Database has completed seeding... to the console
const populateDatabase = (photos, callback, activityCount = 0) => {
  if (activityCount < 100) { // eslint-disable-next-line no-use-before-define
    createActivity(photos, () => {
      populateDatabase(photos, callback, activityCount + 1);
    });
  } else {
    callback();
  }
};
// -------------------------------------------------------------------------------------------------
// createActivity ----------------------------------------------------------------------------------
// A recursive function that creates an activity, an adds it to the database
// After being added to the database, a callback is invoked
// The callback accepts the activityId stored in the db for the newly created activity
// The callback generates a random number between 10 - 15 for the # of images for this activity
// The callback then invokes addInfoForActivity, which creates a "user" that will upload the photos
const createActivity = (photos, callback) => {
  const newActivity = new TripAdvisorActivity();
  newActivity.setActivity();

  addActivity(newActivity, (activityId) => {
    // Generates a random number between 10 and 15 for the number of photos per activity
    const randomNumberOfImagesForActivity = Math.floor(Math.random() * (15 - 10 + 1) + 10);
    // eslint-disable-next-line no-use-before-define
    addUserForActivity(photos, activityId, randomNumberOfImagesForActivity, callback);
  });
};
// -------------------------------------------------------------------------------------------------
// addUserForActivity ------------------------------------------------------------------------------
// A recursive function generates info objects (i.e. users) to upload images for the activity
// Accepts the photos array, the activityId, the number of images that should be created for the
// activity, the callback will take the callstack back to populateDatabase, to start next activity
// Base case: when the number of images for the activity has been reached, invoke callback
// Explanation: in order to have multiple users upload the images for the activity, the function
// calculates a random number of photos to be uploaded per user, this number will be subtracted
// from the total count, until it is less than or equaal to 0
const addUserForActivity = (photos, activityId, activityImagesCount, callback) => {
  if (activityImagesCount <= 0) {
    callback();
  } else {
    const imagesPerUser = Math.min(
      Math.floor(Math.random() * (5 - 1 + 1) + 1), // Generates a random number between 2 and 5
      activityImagesCount, // Ensures that # of images is within bounds
    );

    // Generate a newUser Object
    const newUser = new TripAdvisorPhotoCreatorInfo();
    if (activityImagesCount % 2 === 0) { // Ensures management creates about half of uploaded photos
      newUser.createdByManagement();
    } else {
      newUser.createdByUser();
    }

    addPhotoCreatorInfo(newUser, (infoId) => { // eslint-disable-next-line no-use-before-define
      addImages(photos, activityId, infoId, imagesPerUser, 0, () => {
        const remainingImagesForActivity = activityImagesCount - imagesPerUser;
        photos.splice(0, imagesPerUser); // Removes photos that were just uploaded from the list
        addUserForActivity(photos, activityId, remainingImagesForActivity, callback);
      });
    });
  }
};

// -------------------------------------------------------------------------------------------------
// addImages ---------------------------------------------------------------------------------------
// A recursive function that generates pictures for a particular user
// Accepts the photo's array by reference, activity / user ids, the number of pictures to upload
// for this user, the currentIdx of the image to upload, and a callback that reinvokes the addUser
// function above
// Base Case: when the imgIdx reaches the number of pictures allowed to upload for this user
const addImages = (photos, activityId, infoId, maxImagesForUser, currentImgIdx, callback) => {
  if (currentImgIdx === maxImagesForUser) {
    callback();
  } else {
    const newPhoto = new TripAdvisorPhoto(photos[currentImgIdx]);
    addPhoto(newPhoto, activityId, infoId, (err) => {
      if (err) {
        throw new Error(err);
      } else {
        addImages(photos, activityId, infoId, maxImagesForUser, currentImgIdx + 1, callback);
      }
    });
  }
};

// -------------------------------------------------------------------------------------------------

init(imageUrlsFilePath, (imagePaths) => {
  populateDatabase(imagePaths, () => { // eslint-disable-next-line no-console
    console.log('Database has completed seeding...');
  });
});
